(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{DFTJ:function(e,t,n){"use strict";n.r(t);var s=n("KHd+"),o=n("UQSp"),a=n("Kw5r");function r(e){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}a.a.config.optionMergeStrategies;var i={VueRemarkRoot:o.a},l=function(e){var t=e.options.components=e.options.components||{},n=e.options.computed=e.options.computed||{};Object.keys(i).forEach((function(e){"object"===r(i[e])&&"function"==typeof i[e].render||"function"==typeof i[e]&&"function"==typeof i[e].options.render?t[e]=i[e]:n[e]=function(){return i[e]}}))},p=a.a.config.optionMergeStrategies,c="__vueRemarkFrontMatter",u={excerpt:"A quick guide on how to set up and use the SMPLify-X container I've put together.",title:"Getting Started with OpenPose & SMPLify-X",authors:"Chirag Karia",collection:null,part:0,date:"2020-08-07T00:00:00.000Z",cover:"https://raw.githubusercontent.com/vchoutas/smplify-x/master/images/teaser_fig.png",tags:["3D Body Models","SMPLify-X","OpenPose","Docker","Development Environment"]};var d=function(e){e.options[c]&&(e.options[c]=u),a.a.util.defineReactive(e.options,c,u),e.options.computed=p.computed({$frontmatter:function(){return e.options[c]}},e.options.computed)},h=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("VueRemarkRoot",[n("h1",{attrs:{id:"introduction"}},[n("a",{attrs:{href:"#introduction","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("Introduction")]),n("figure",[n("div",{staticClass:"columns"},[n("div",{staticClass:"column"},[n("g-image",{staticClass:"image",attrs:{src:"/files/post-images/smplify-x-container/me.jpg",alt:"Source image for body model"}})],1),n("div",{staticClass:"column"},[n("g-image",{staticClass:"image",attrs:{src:"/files/post-images/smplify-x-container/me_body_model.png",alt:"Image with rendered body model"}})],1)]),n("figcaption",[e._v("\n        A source image and the corresponding body model made using the OpenPose and SMPLify-X containers\n    ")])]),n("p",[e._v("This is a more detailed post on how to leverage the containers for "),n("a",{attrs:{href:"https://smpl-x.is.tue.mpg.de/",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("SMPLify-X")]),e._v(" and \n"),n("a",{attrs:{href:"https://github.com/CMU-Perceptual-Computing-Lab/openpose",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("OpenPose")]),e._v(" that I provide in my \n"),n("a",{attrs:{href:"https://github.com/kidkych/smplifyx-and-openpose-containers",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("public repo")]),e._v(". ")]),n("p",[e._v("SMPLify-X is a computer vision algorithm that creates an expressive body model of  individuals using a single image.\nHowever, downloading and running the code is slightly difficult, and requires building a few different packages as \ndependencies. OpenPose is a 2D human pose model that extracts the joints and other keypoints of an individual from a \nsingle image. SMPLify-X requires that you have \nOpenPose setup and functional which in itself can be tough. Further, even if you take all the correct steps \nto get SMPLify-X working, doing it with a conda environment the \n"),n("a",{attrs:{href:"https://github.com/vchoutas/torch-mesh-isect",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("torch-mesh-isect")]),e._v(" package can throw a segmentation fault without any\ninformation as to why. The repo author suggests that SMPLify-X should be used with either the system's installation of \npython3, or to use "),n("a",{attrs:{href:"https://docs.python.org/3/library/venv.html",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("venv")]),e._v(".")]),n("p",[e._v("I personally do not like working with the system installation of python on my native OS; venv could be a\npotential solution but SMPLify-X and OpenPose require building quite a few packages so I'd rather containerize them to\nensure it's portable and simple to get running on a new system. I figured I'd write a more detailed how-to guide here \nthan what is provided by my repo's README just to help those who are new to Docker for machine learning.")]),n("h1",{attrs:{id:"table-of-contents"}},[n("a",{attrs:{href:"#table-of-contents","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("Table of Contents")]),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"#1---prerequisites"}},[e._v("1 - Prerequisites")])]),n("ul",[n("li",[n("p",[n("a",{attrs:{href:"#11---set-up-docker-for-gpu-passthrough"}},[e._v("1.1 - Set Up Docker for GPU Passthrough")])]),n("ul",[n("li",[n("a",{attrs:{href:"#1-install-docker-190312"}},[e._v("1) Install Docker 19.03.12")])]),n("li",[n("a",{attrs:{href:"#2-install-the-nvidia-container-toolkit"}},[e._v("2) Install the NVIDIA Container Toolkit")])])])])])]),n("li",[n("p",[n("a",{attrs:{href:"#2---running-smplify-x-on-your-own-images"}},[e._v("2 - Running SMPLify-X on Your Own Images")])])]),n("li",[n("p",[n("a",{attrs:{href:"#3---using-the-smplify-x-container-for-development"}},[e._v("3 - Using the SMPLify-X Container for Development")])])])]),n("h1",{attrs:{id:"1---prerequisites"}},[n("a",{attrs:{href:"#1---prerequisites","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("1 - Prerequisites")]),n("p",[e._v("There are four main requirements to keep in mind when using these containers.")]),n("ol",[n("li",[e._v("A Linux based OS ")]),n("li",[e._v("A CUDA enabled GPU that supports CUDA 10")]),n("li",[e._v("Sudo access")]),n("li",[e._v("Docker set up such that you can passthrough GPUs to docker containers")])]),n("p",[e._v("The first three are based on your software and hardware configuration, but the last one will require to install the\nlatest version of Docker (19.03.12 as of this writing) and the NVIDIA container toolkit. Note, the host system does not \nneed to have CUDA itself installed, but it must have the NVIDIA drivers. I'll highlight the steps to install Docker and\nthe NVIDIA Container Toolkit next.")]),n("h2",{attrs:{id:"11---set-up-docker-for-gpu-passthrough"}},[n("a",{attrs:{href:"#11---set-up-docker-for-gpu-passthrough","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("1.1 - Set Up Docker for GPU Passthrough")]),n("p",[e._v("If you are using an older version of Docker (< 19.03.12) and already enabled GPU support using nvidia-docker2 then you\nsimply need to update your Docker installation and everything should work. However nvidia-docker2 will soon be \ndeprecated so I would suggest uninstalling it, and installing the nvidia-container-toolkit. If you have neither Docker, \nor the nvidia packages to enable GPU passthrough follow the instructions below. If you do, you may skip to section 2.")]),n("h3",{attrs:{id:"1-install-docker-190312"}},[n("a",{attrs:{href:"#1-install-docker-190312","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("1) Install Docker 19.03.12")]),n("p",[e._v("Note these instructions are for Ubuntu 16.04 or later, and Debian Jessie or later. They have been retrieved from \n"),n("a",{attrs:{href:"https://docs.docker.com/engine/install/",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("Docker's own website")]),e._v(". Please refer to their instructions if you're using an\nARM based system, or installing on a linux distribution that isn't Ubuntu or Debian.")]),n("p",[e._v("First we must set up our system to enable support for adding new repositories over HTTPS")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Update package manager repositories")]),e._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Install dependencies for adding a new repository to package manager")]),e._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    apt-transport-https "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    ca-certificates "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    gnupg-agent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    software-properties-common")])]),n("p",[e._v("After the previous step, we must add the Docker repository relevant to our system")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ubuntu")]),e._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -fsSL https://download.docker.com/linux/ubuntu/gpg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" add-apt-repository "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n   '),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(' \\\n   stable"')]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Debian")]),e._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -fsSL https://download.docker.com/linux/debian/gpg "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" add-apt-repository "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"deb [arch=amd64] https://download.docker.com/linux/debian \\\n   '),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("lsb_release -cs"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v(' \\\n   stable"')])])]),n("p",[e._v("Make sure you have the right key.")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key fingerprint 0EBFCD88")])]),n("p",[e._v("The output of the previous command will look similar to the code block below and must match this fingerprint:\n"),n("code",{pre:!0},[e._v("9DC8 5822 9FC7 DD38 854A E2D8 8D81 803C 0EBF CD88")])]),n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",{pre:!0,attrs:{class:"language-text"}},[e._v("pub   4096R/0EBFCD88 2017-02-22\n      Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88\nuid                  Docker Release (CE deb) <docker@docker.com>\nsub   4096R/F273FCD8 2017-02-22")])]),n("p",[e._v("Finally we can install Docker")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" docker-ce docker-ce-cli containerd.io")])]),n("h3",{attrs:{id:"2-install-the-nvidia-container-toolkit"}},[n("a",{attrs:{href:"#2-install-the-nvidia-container-toolkit","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("2) Install the NVIDIA Container Toolkit")]),n("p",[e._v("The NVIDIA Container Toolkit provides utilities that make it easier to use NVIDIA GPUs within a Docker container. These\ninstructions are again relevant to Ubuntu and Debian systems. Check the \n"),n("a",{attrs:{href:"https://github.com/NVIDIA/nvidia-docker",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("Nvidia Container Toolkit repo")]),e._v(" for instructions to install on other \ndistributions.")]),n("p",[e._v("First we must add the repository to our package manager.")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("distribution")]),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" /etc/os-release"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" $ID$VERSION_ID"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -s -L https://nvidia.github.io/nvidia-docker/gpgkey "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" apt-key "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("add")]),e._v(" -\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("curl")]),e._v(" -s -L https://nvidia.github.io/nvidia-docker/"),n("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$distribution")]),e._v("/nvidia-docker.list "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("tee")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    /etc/apt/sources.list.d/nvidia-docker.list")])]),n("p",[e._v("Then we update our package manager's sources, and install the NVIDIA Container Toolkit")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" update "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("apt-get")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" -y nvidia-container-toolkit\n$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl restart docker")])]),n("p",[e._v("At this point if everything installed successfully, then you should have both Docker and NVIDIA Container Toolkit on\nyour system.")]),n("h1",{attrs:{id:"2---running-smplify-x-on-your-own-images"}},[n("a",{attrs:{href:"#2---running-smplify-x-on-your-own-images","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("2 - Running SMPLify-X on Your Own Images")]),n("p",[e._v("Once you have both Docker and the NVIDIA Container Toolkit setup, using the containerized versions of OpenPose and \nthe SMPLify-X is pretty straightforward. Clone my "),n("a",{attrs:{href:"https://github.com/kidkych/smplifyx-and-openpose-containers",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("repo")]),e._v(" \nand place the images for which you want to generate 3D body models into the "),n("code",{pre:!0},[e._v("data/images")]),e._v("  directory. Then simply run\nthe "),n("code",{pre:!0},[e._v("run_both.sh")]),e._v(" script and both the OpenPose and SMPLify-X containers will be built and used. First the images will be\nrun through OpenPose to get 2D keypoints (they can be found under "),n("code",{pre:!0},[e._v("data/keypoints")]),e._v(" after OpenPose is run), followed by\nboth the keypoints and images being used by SMPLify-X to generate the body models. The outputs of SMPLify-X including\nimages with the body models rendered on top will be in the "),n("code",{pre:!0},[e._v("outputs")]),e._v(" directory.")]),n("p",[e._v("To use the SMPLify-X container, you will need to download the necessary pretrained weights from the project website. You\nwill need to register for an account, and place them in the "),n("code",{pre:!0},[e._v("smplify-x/models")]),e._v(" directory. The models are available\n"),n("a",{attrs:{href:"https://smpl-x.is.tue.mpg.de/downloads",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("here")]),e._v(". You will need to download the SMPL-X model, the VPoser model, and the \nHomogenus model. You will also need the "),n("code",{pre:!0},[e._v("smplx_parts_segm.pkl")]),e._v(" model from \n"),n("a",{attrs:{href:"https://owncloud.tuebingen.mpg.de/index.php/s/MWnr8Kso4K8T8at",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("here")]),e._v(". The structure of the directory should look as \nfollows:")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("smplify-x/\n    -"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" models/\n      -"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" homogenus_v1_0/*\n      -"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" smplx/*        \n      -"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" vposer_v1_0/*        \n      -"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" smplx_parts_segm.pkl")])]),n("p",[e._v("When running the containers, you will be asked for your password to perform root level tasks. This includes changing the\nownership of files produced within containers, and to bind your host's X-Session to the Docker Container. This is \nrequired because SMPLify-X requires access to an OpenGL environment to visualize the rendering, and this will require a\nscreen to display.")]),n("p",[e._v("Please keep in mind that the first time you run these containers, the images will need to be built. This means that \nwithin the container the dependencies will be built, and based on your system this may take up to 20-30 minutes if not \nmore. Also, if you only wish to run one of the OpenPose or SMPLify-X containers, then the relevant script can be used\nindependently. You can use the containers as follows:")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("$ "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" clone https://github.com/kidkych/smplifyx-and-openpose-containers\n\n$ "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("cd")]),e._v(" smplifyx-and-openpose-containers\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Make sure the necessary files are downloaded and placed in smplify-x/models")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# and place images of interest into data/images now")]),e._v("\n\n$ ./run_both.sh")])]),n("h1",{attrs:{id:"3---using-the-smplify-x-container-for-development"}},[n("a",{attrs:{href:"#3---using-the-smplify-x-container-for-development","aria-hidden":"true"}},[n("span",{staticClass:"icon icon-link"})]),e._v("3 - Using the SMPLify-X Container for Development")]),n("p",[e._v("If you wish to use SMPLify-X as a part of your own python code, this is possible using bind-mounts in Docker. Simply\nadd the directory containing your source code as a bind mount and execute your code's entrypoint when starting the \ncontainer as such:")]),n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",{pre:!0,attrs:{class:"language-shell"}},[e._v("docker run --rm -it --gpus all "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v('\n  -v "path_to_source_code:/home/src '),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  smplifyx_container:latest "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  python3 /home/src/main.py")])]),n("p",[e._v("you will also need to modify the "),n("code",{pre:!0},[e._v("sys.path")]),e._v(" variable in the file you first import the smplifyx packages. This would \nbe done as follows:")]),n("pre",{pre:!0,attrs:{class:"language-python"}},[n("code",{pre:!0,attrs:{class:"language-python"}},[n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# path_to_source_code/main.py")]),e._v("\nsys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("path"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("append"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"/home/repos/smplify-x/smplifyx"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("from")]),e._v(" fit_single_frame "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("import")]),e._v(" fit_single_frame\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# do something ")])])]),n("p",[e._v("If you wish to use a debugger while developing your code base, I would suggest using the extensions for VS Code, or \nPyCharm both of which greatly simplify the process. I personally use PyCharm when developing within a container but \neither will work fine.")]),n("ul",[n("li",[n("a",{attrs:{href:"https://www.jetbrains.com/help/pycharm/using-docker-as-a-remote-interpreter.html",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("PyCharm Docker Plugin")]),e._v(" (This \n  requires the professional version of PyCharm. If you are a student you can get it for free \n  "),n("a",{attrs:{href:"https://www.jetbrains.com/community/education/#students",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("here")]),e._v(")")]),n("li",[n("a",{attrs:{href:"https://code.visualstudio.com/docs/containers/debug-common",target:"_blank",rel:"nofollow noopener noreferrer"}},[e._v("VS Code Docker Plugin")])])])])}),[],!1,null,null,null);"function"==typeof l&&l(h),"function"==typeof d&&d(h);t.default=h.exports},UQSp:function(e,t,n){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}}}]);